---

- name: Remove Old Docker packages and put Docker CE package in repo folder
  hosts: localhost

  tasks:
    - name: Remove old docker and its dependencies
      become: yes
      ansible.builtin.dnf:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-selinux
          - docker-engine-selinux
          - docker-engine
        autoremove: yes

    - name: Put Docker CE dependency in "/etc/yum_repos.d/"
      ansible.builtin.yum_repository:
        name: docker-ce
        description: Docker CE Repository
        baseurl: https://download.docker.com/linux/fedora/$releasever/$basearch/stable
        gpgcheck: yes
        enabled: yes
        gpgkey: https://download.docker.com/linux/fedora/gpg

    - name: Refresh DNF cache
      become: yes
      ansible.builtin.dnf:
        name: '*'
        state: latest
        update_cache: yes

- name: Install Docker, start service and enable persistency
  hosts: localhost
  tasks:
    - name: Install Docker plugins
      become: yes
      ansible.builtin.dnf:
        name:
          - dnf-plugins-core
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin

    - name: Start Docker service
      ansible.builtin.service:
        name: docker
        state: started

    - name: Enable Docker service and persistency
      ansible.builtin.service:
        name: docker
        enabled: yes

- name: Go language installation
  hosts: localhost
  tasks:
    - name: Install Go language
      become: yes
      ansible.builtin.dnf:
        name: golang

    - name: Setup Go language env variable
      ansible.builtin.lineinfile:
        path: /etc/profile
        line: 'export GOBIN=${GOBIN:-$(go env GOPATH)/bin}'
        state: present

- name: OpenTelemetry setup
  hosts: localhost
  tasks:
    - name: Pull OTEL docker image
      become: yes
      community.docker.docker_image:
        name: otel/opentelemetry-collector:latest
        source: pull

    - name: Run OTEL installation
      ansible.builtin.command: go install github.com/open-telemetry/opentelemetry-collector-contrib/cmd/telemetrygen@latest

    # ansible.builtin.command:
    # argv:
    # - go
    # - install
    # - github.com/open-telemetry/opentelemetry-collector-contrib/cmd/telemetrygen@latest

- name: Firewall hardening activity
  hosts: localhost
  tasks:
    - name: Set Default interface 
      ansible.posix.firewalld:
        zone: trusted
        # how to get a network interface from the system automatically and assign it to be default?
        interface: "{{ ansible_default_ipv4.interface }}" # by using facts module setting up system's default network interface in this case ens160
        # OR we can use the following approach by enabling ansible.builtin.shell to get default network interface:
        # cmd: firewall-cmd --permanent --zone=trusted --change-interface=$(ip route | grep default | awk '{print $5}')
        permanent: true
        state: enabled

    - name: Set Default Firewalld zone to trusted
      ansible.builtin.shell:
        cmd: firewall-cmd --set-default-zone=trusted

    - name: Allow various services
      ansible.posix.firewalld:
        zone: trusted
        service: "{{ item }}"
        permanent: true
        state: enabled
      loop:
        - ntp
        - dns
        - ssh
        - http
        - https

    - name: Allows open telemetry ports  
      ansible.posix.firewalld:
        rich_rule: rule family="ipv4" port port="4317-4318" protocol="tcp" accept
        zone: trusted
        permanent: true
        immediate: true
        state: enabled

    - name: Restart Firewalld service
      ansible.builtin.service:
        name: firewalld
        state: reloaded
